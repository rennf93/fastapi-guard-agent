from typing import Any, Protocol, runtime_checkable

from guard_agent.models import AgentStatus, DynamicRules, SecurityEvent, SecurityMetric


@runtime_checkable
class RedisHandlerProtocol(Protocol):
    """Protocol for Redis handlers - compatible with fastapi-guard."""

    async def get_key(self, namespace: str, key: str) -> Any: ...
    async def set_key(
        self, namespace: str, key: str, value: Any, ttl: int | None = None
    ) -> bool | None: ...
    async def initialize(self) -> None: ...


@runtime_checkable
class TransportProtocol(Protocol):
    """Protocol for transport layer implementations."""

    async def send_events(self, events: list[SecurityEvent]) -> bool: ...
    async def send_metrics(self, metrics: list[SecurityMetric]) -> bool: ...
    async def fetch_dynamic_rules(self) -> DynamicRules | None: ...
    async def send_status(self, status: AgentStatus) -> bool: ...


@runtime_checkable
class BufferProtocol(Protocol):
    """Protocol for event buffering implementations."""

    async def add_event(self, event: SecurityEvent) -> None: ...
    async def add_metric(self, metric: SecurityMetric) -> None: ...
    async def flush_events(self) -> list[SecurityEvent]: ...
    async def flush_metrics(self) -> list[SecurityMetric]: ...
    async def get_buffer_size(self) -> int: ...
    async def clear_buffer(self) -> None: ...


@runtime_checkable
class AgentHandlerProtocol(Protocol):
    """Protocol for agent handlers - follows existing fastapi-guard pattern."""

    async def initialize_redis(self, redis_handler: RedisHandlerProtocol) -> None: ...
    async def send_event(self, event: SecurityEvent) -> None: ...
    async def send_metric(self, metric: SecurityMetric) -> None: ...
    async def get_dynamic_rules(self) -> DynamicRules | None: ...
    async def flush_buffer(self) -> None: ...
    async def get_status(self) -> AgentStatus: ...
    async def close(self) -> None: ...
